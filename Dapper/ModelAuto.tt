<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ include file="DBSchema.ttinclude"#>

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using DapperEx;

namespace Entity
{

<#
    var dbSchema=DBSchemaFactory.GetDBSchema();
    List<string> tableList=dbSchema.GetTablesList();
    string Extension="Info";
    foreach(string tableName in tableList)
    {
        Table table=dbSchema.GetTableMetadata(tableName);
#>

    [Serializable]
    [TableAttribute(Name = "<#=tableName#>")]
     /// <summary>
     ///<#=tableName#><#=Extension#><#= table.TableExplain??""#>
     /// </summary>
    public partial class <#=tableName#><#=Extension#>
    {
        #region 构造函数
        public <#=tableName#><#=Extension#>() { }

        public <#=tableName#><#=Extension#>(<#=table.ColumnTypeNames#>)
        {
<#
        foreach(Column c in table.Columns)
        {
#>
            this.<#=c.LowerColumnName#> = <#=c.LowerColumnName#>;
<#
        }
#>
        }
        #endregion

        #region 属性
<#
        foreach(Column c in table.Columns)
        {
#>

        private <#=GeneratorHelper.GetQuesMarkByType(c.AllowDBNull,c.TypeName)#> <#=c.LowerColumnName#>;

         /// <summary>
<#  
            string ColumnExplain="";
            if(!String.IsNullOrWhiteSpace(c.ColumnExplain))
            {
                string []  ColumnExplains = c.ColumnExplain.Split(new [] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries);
                foreach (var line in ColumnExplains)
                {#>
         ///<#=line#>
<#              }
            }
             #>
         /// </summary>
<#
            if(c.AutoIncrement)
            {#>    
        [Id(true)]
<#            }
#>
        public <#=GeneratorHelper.GetQuesMarkByType(c.AllowDBNull,c.TypeName)#> <#=c.UpColumnName#>
        {
            get { return <#=c.LowerColumnName#>; }
            set { <#=c.LowerColumnName#> = value; }
        }
<#
        }
#>
        #endregion

        #region 验证
        public List<string> ErrorList = new List<string>();
        private bool Validator()
        {    
            bool validatorResult = true;
<#
        foreach(Column c in table.Columns)
        {
            if(!c.AllowDBNull)
            {
                if(c.TypeName==GeneratorHelper.StringType)
                {
#>
            if (string.IsNullOrEmpty(this.<#=c.UpColumnName#>))
            {
                validatorResult = false;
                this.ErrorList.Add("The <#=c.UpColumnName#> should not be empty!");
            }
<#
                }
                if(c.TypeName==GeneratorHelper.DateTimeType)
                {
#>
            if (this.<#=c.UpColumnName#>==null)
            {
                validatorResult = false;
                this.ErrorList.Add("The <#=c.UpColumnName#> should not be empty!");
            }
<#
                }
            }
            if(c.TypeName==GeneratorHelper.StringType)
            {
#>
            if (this.<#=c.UpColumnName#> != null && <#=c.MaxLength#> < this.<#=c.UpColumnName#>.Length)
            {
                validatorResult = false;
                this.ErrorList.Add("The length of <#=c.UpColumnName#> should not be greater then <#=c.MaxLength#>!");
            }
<#
            }
        }
#>
            return validatorResult;
        }

        #endregion

        #region 辅助方法
        public  <#=tableName#><#=Extension#> Clone(bool isDeepCopy)
        {
            <#=tableName#><#=Extension#>  footman;
            if (isDeepCopy)
            {
                MemoryStream memoryStream = new MemoryStream();
                BinaryFormatter formatter = new BinaryFormatter();
                formatter.Serialize(memoryStream, this);
                memoryStream.Position = 0;
                footman = (<#=tableName#><#=Extension#>)formatter.Deserialize(memoryStream);
            }
            else
            { 
                footman = (<#=tableName#><#=Extension#>)this.MemberwiseClone();
            } 
            return footman;
        }
        #endregion    

     }

<#
    }
    dbSchema.Dispose();
#>
}

ModelAuto.tt
